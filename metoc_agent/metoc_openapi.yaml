openapi: 3.0.3
info:
  title: Arctic METOC Agent API (PoX, Open‑Meteo + Geocoder)
  version: 0.5.0
  summary: LLM‑friendly API for weather/marine/geocoding with governance and Orchestrate vendor extensions.
  description: |
    Minimal Proof‑of‑Experience API that wraps Open‑Meteo (atmosphere, marine) and Open‑Meteo Geocoding.
    This revision adds:
      • explicit, reusable parameters and headers
      • standardized error schema and responses (RFC‑7807 style)
      • security schemes (API key and Bearer)
      • operationIds and examples for LLM grounding
      • vendor extensions for WatsonX Orchestrate (x‑orchestrate) with intents, slot mappings, and output shaping
      • rate‑limit and idempotency headers
      • response examples to improve few‑shot behavior for LLMs
  termsOfService: https://example.org/tos
  contact:
    name: METOC PoX Team
    email: metoc@example.org
  license:
    name: Apache‑2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
externalDocs:
  description: Open‑Meteo documentation
  url: https://open-meteo.com/
servers:
  - url: https://{host}/{basePath}
    description: Default
    variables:
      host:
        default: localhost:8080
        description: Hostname and port
      basePath:
        default: metoc
        description: Base path for all endpoints
  - url: http://localhost:8080/metoc
    description: Local development
security:
  - ApiKeyAuth: []
  - BearerAuth: []
tags:
  - name: Health
  - name: Geocoder
  - name: Atmosphere
  - name: Marine

paths:
  /health:
    get:
      tags: [Health]
      summary: Liveness probe
      operationId: getHealth
      responses:
        '200':
          description: OK
          headers:
            X-Request-ID:
              $ref: '#/components/headers/XRequestID'
            X-Response-Time-MS:
              $ref: '#/components/headers/XResponseTimeMS'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: ok }
                  governance: { $ref: '#/components/schemas/GovernanceMeta' }
              examples:
                ok:
                  value:
                    status: ok
                    governance:
                      app: metoc-api
                      app_version: 0.5.0
                      endpoint: /health
      x-orchestrate:
        actionName: Check service health
        description: Quickly verify that the METOC agent is reachable for subsequent actions.
        intentExamples:
          - "Is the METOC service up?"

  /geocode/search:
    get:
      tags: [Geocoder]
      summary: Forward geocoding via Open‑Meteo Geocoding API
      operationId: geocodeSearch
      parameters:
        - $ref: '#/components/parameters/Name'
        - $ref: '#/components/parameters/Count'
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Format'
        - $ref: '#/components/parameters/IdempotencyKey'
      responses:
        '200':
          description: Geocoding results
          headers:
            X-Request-ID: { $ref: '#/components/headers/XRequestID' }
            X-Response-Time-MS: { $ref: '#/components/headers/XResponseTimeMS' }
            X-RateLimit-Limit: { $ref: '#/components/headers/XRateLimitLimit' }
            X-RateLimit-Remaining: { $ref: '#/components/headers/XRateLimitRemaining' }
            X-RateLimit-Reset: { $ref: '#/components/headers/XRateLimitReset' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  results: { type: object }
                  governance: { $ref: '#/components/schemas/GovernanceMeta' }
              examples:
                barrow:
                  value:
                    results:
                      results:
                        - id: 587
                          name: Utqiagvik
                          latitude: 71.2906
                          longitude: -156.7886
                          country: US
                          admin1: Alaska
                    governance:
                      endpoint: /geocode/search
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalError' }
      x-orchestrate:
        actionName: Find place coordinates
        description: Convert a place name to latitude/longitude for downstream forecast calls.
        slots:
          - name: name
            required: true
            fromUserUtterance: true
            examples: ["Barrow", "Utqiagvik", "Nome"]
        outputShape:
          path: results.results[0]
          projection:
            latitude: $.latitude
            longitude: $.longitude
            display_name: '$.name'
        followOns:
          - operationId: getAtmosphereForecast
          - operationId: getMarineForecast

  /atmosphere/forecast:
    get:
      tags: [Atmosphere]
      summary: Atmospheric forecast via Open‑Meteo
      operationId: getAtmosphereForecast
      parameters:
        - $ref: '#/components/parameters/Lat'
        - $ref: '#/components/parameters/Lon'
        - $ref: '#/components/parameters/Hourly'
        - $ref: '#/components/parameters/Daily'
        - $ref: '#/components/parameters/CurrentWeather'
        - $ref: '#/components/parameters/Timezone'
        - $ref: '#/components/parameters/ForecastDays'
        - $ref: '#/components/parameters/IdempotencyKey'
      responses:
        '200':
          description: Open‑Meteo forecast payload
          headers:
            X-Request-ID: { $ref: '#/components/headers/XRequestID' }
            X-Response-Time-MS: { $ref: '#/components/headers/XResponseTimeMS' }
            X-RateLimit-Limit: { $ref: '#/components/headers/XRateLimitLimit' }
            X-RateLimit-Remaining: { $ref: '#/components/headers/XRateLimitRemaining' }
            X-RateLimit-Reset: { $ref: '#/components/headers/XRateLimitReset' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  forecast: { type: object }
                  governance: { $ref: '#/components/schemas/GovernanceMeta' }
              examples:
                simple:
                  value:
                    forecast:
                      latitude: 71.29
                      longitude: -156.79
                      hourly:
                        time: ["2025-10-14T12:00:00Z", "2025-10-14T13:00:00Z"]
                        temperature_2m: [-7.1, -7.6]
                    governance:
                      endpoint: /atmosphere/forecast
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalError' }
      x-orchestrate:
        actionName: Get atmospheric forecast
        description: Retrieve temperature, wind, and related variables for a lat/lon.
        intentExamples:
          - "What will the temperature be in Utqiagvik tomorrow?"
          - "Give me the next 48 hours of wind at 71.29, -156.79"
        slotMapping:
          latitude: $.params.lat
          longitude: $.params.lon
          variables: $.params.hourly | $.params.daily
        outputShape:
          path: forecast
          projection:
            start: $.hourly.time[0]
            end: $.hourly.time[-1]
            temps: $.hourly.temperature_2m

  /atmosphere/archive:
    get:
      tags: [Atmosphere]
      summary: Historical weather via Open‑Meteo Archive API
      operationId: getAtmosphereArchive
      parameters:
        - $ref: '#/components/parameters/Lat'
        - $ref: '#/components/parameters/Lon'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/Hourly'
        - $ref: '#/components/parameters/Daily'
        - $ref: '#/components/parameters/Timezone'
        - $ref: '#/components/parameters/IdempotencyKey'
      responses:
        '200':
          description: Open‑Meteo archive payload
          headers:
            X-Request-ID: { $ref: '#/components/headers/XRequestID' }
            X-Response-Time-MS: { $ref: '#/components/headers/XResponseTimeMS' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  archive: { type: object }
                  governance: { $ref: '#/components/schemas/GovernanceMeta' }
              examples:
                sample:
                  value:
                    archive:
                      latitude: 71.29
                      longitude: -156.79
                      daily:
                        time: ["2025-09-01", "2025-09-02"]
                        temperature_2m_max: [-4.2, -5.1]
                    governance:
                      endpoint: /atmosphere/archive
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalError' }
      x-orchestrate:
        actionName: Get historical weather
        description: Retrieve historical weather for analysis or baselining.
        intentExamples:
          - "What were max temps last week at 71.29, -156.79?"

  /marine/forecast:
    get:
      tags: [Marine]
      summary: Marine forecast via Open‑Meteo Marine API
      operationId: getMarineForecast
      parameters:
        - $ref: '#/components/parameters/Lat'
        - $ref: '#/components/parameters/Lon'
        - $ref: '#/components/parameters/Hourly'
        - $ref: '#/components/parameters/Timezone'
        - $ref: '#/components/parameters/ForecastDaysMarine'
        - $ref: '#/components/parameters/IdempotencyKey'
      responses:
        '200':
          description: Open‑Meteo marine payload
          headers:
            X-Request-ID: { $ref: '#/components/headers/XRequestID' }
            X-Response-Time-MS: { $ref: '#/components/headers/XResponseTimeMS' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  marine: { type: object }
                  governance: { $ref: '#/components/schemas/GovernanceMeta' }
              examples:
                waves:
                  value:
                    marine:
                      latitude: 71.29
                      longitude: -156.79
                      hourly:
                        time: ["2025-10-14T12:00:00Z", "2025-10-14T13:00:00Z"]
                        significant_wave_height: [1.4, 1.6]
                    governance:
                      endpoint: /marine/forecast
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalError' }
      x-orchestrate:
        actionName: Get marine forecast
        description: Retrieve wave, swell, and current variables.
        intentExamples:
          - "Wave height near Barrow for the next 24 hours"
        outputShape:
          path: marine
          projection:
            times: $.hourly.time
            swh: $.hourly.significant_wave_height

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: Optional API key if deployed behind an API gateway.
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  headers:
    XRequestID:
      description: Correlation ID assigned by middleware (or supplied by caller).
      schema: { type: string }
    XResponseTimeMS:
      description: Elapsed processing time in milliseconds.
      schema: { type: string }
    XRateLimitLimit:
      description: The number of allowed requests in the current window.
      schema: { type: integer }
    XRateLimitRemaining:
      description: The number of remaining requests in the current window.
      schema: { type: integer }
    XRateLimitReset:
      description: UTC epoch seconds when the window resets.
      schema: { type: integer }
  parameters:
    IdempotencyKey:
      name: Idempotency-Key
      in: header
      required: false
      description: Provide a unique key to make GETs safe to replay across orchestrations.
      schema: { type: string, minLength: 8 }
    Name:
      name: name
      in: query
      required: true
      schema: { type: string }
      description: Place name to search (city, landmark, station).
      example: Utqiagvik
    Count:
      name: count
      in: query
      required: false
      schema: { type: integer, minimum: 1, maximum: 100, default: 10 }
    Language:
      name: language
      in: query
      required: false
      schema: { type: string }
      example: en
    Format:
      name: format
      in: query
      required: false
      schema: { type: string, enum: [json], default: json }
    Lat:
      name: lat
      in: query
      required: true
      schema: { type: number, minimum: -90, maximum: 90 }
    Lon:
      name: lon
      in: query
      required: true
      schema: { type: number, minimum: -180, maximum: 180 }
    Hourly:
      name: hourly
      in: query
      required: false
      schema: { type: string }
      description: Comma‑separated list of hourly variables.
      example: temperature_2m,wind_speed_10m
    Daily:
      name: daily
      in: query
      required: false
      schema: { type: string }
      description: Comma‑separated list of daily variables.
      example: temperature_2m_max,temperature_2m_min
    CurrentWeather:
      name: current_weather
      in: query
      required: false
      schema: { type: boolean, default: true }
    Timezone:
      name: timezone
      in: query
      required: false
      schema: { type: string }
      example: UTC
    ForecastDays:
      name: forecast_days
      in: query
      required: false
      schema: { type: integer, minimum: 1, maximum: 16, default: 7 }
    ForecastDaysMarine:
      name: forecast_days
      in: query
      required: false
      schema: { type: integer, minimum: 1, maximum: 10, default: 5 }
    StartDate:
      name: start_date
      in: query
      required: true
      schema: { type: string, format: date }
      example: '2025-09-01'
    EndDate:
      name: end_date
      in: query
      required: true
      schema: { type: string, format: date }
      example: '2025-10-08'
  responses:
    BadRequest:
      description: Bad request
      content:
        application/problem+json:
          schema: { $ref: '#/components/schemas/Error' }
    Unauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema: { $ref: '#/components/schemas/Error' }
    TooManyRequests:
      description: Too many requests
      headers:
        Retry-After:
          description: Seconds to wait before retrying.
          schema: { type: integer }
      content:
        application/problem+json:
          schema: { $ref: '#/components/schemas/Error' }
    InternalError:
      description: Unexpected error
      content:
        application/problem+json:
          schema: { $ref: '#/components/schemas/Error' }
  schemas:
    GovernanceMeta:
      type: object
      additionalProperties: true
      properties:
        app: { type: string }
        app_version: { type: string }
        endpoint: { type: string }
        timestamp: { type: string, format: date-time }
        request_id: { type: string }
        served_by: { type: string }
        inputs:
          type: object
          additionalProperties: true
        data_lineage:
          type: object
          additionalProperties: true
        quality:
          type: object
          additionalProperties: true
        policies_applied:
          type: array
          items: { type: string }
        risk_assessments:
          type: array
          items:
            type: object
            additionalProperties: true
        tags:
          type: object
          additionalProperties: true
        license:
          type: object
          properties:
            name: { type: string }
            url: { type: string }
    Error:
      type: object
      description: RFC7807 problem details
      properties:
        type: { type: string, format: uri, example: about:blank }
        title: { type: string }
        status: { type: integer }
        detail: { type: string }
        instance: { type: string }
        request_id: { type: string }
        governance: { $ref: '#/components/schemas/GovernanceMeta' }
      required: [title, status]
