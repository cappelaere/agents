openapi: 3.0.3
info:
  title: AIS Agent
  version: "0.1.8"
  description: |
    Minimal REST facade over an AIS upstream plus an AOI registry for LLM-friendly queries.
    - Identifier rule: supply **exactly one** of `ship_id | mmsi | imo` for `/vessel/info` and `/vessel/track`.
    - AOI usage: pass `aoi_id` (preferred) or raw `bbox` (`minLon,minLat,maxLon,maxLat`).
    - Detail: `msgtype` âˆˆ {simple, extended, full}.
    - Ship types per upstream: 2=Fishing, 4=High Speed Craft, 6=Passenger, 7=Cargo, 8=Tanker.
    - Governance: every endpoint returns `meta` for traceability (timestamps, hashes, version, etc.).

servers:
  - url: http://localhost:8100

tags:
  - name: Health
  - name: AOI
  - name: Vessels
  - name: Tracks

paths:
  /healthz:
    get:
      tags: [Health]
      summary: Liveness & upstream reachability
      operationId: healthz
      security: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: ok }
                  version: { type: string }
                  upstream: { type: string }
                  detail: { type: string }

  /aoi:
    get:
      tags: [AOI]
      summary: List registered AOIs (bbox-only in this registry)
      operationId: listAois
      description: |
        Returns AOIs from the on-disk GeoJSON registry. Each item includes an id, display name,
        type (=bbox), and preview bbox. Response also includes governance metadata.
      responses:
        "200":
          description: AOI list and governance metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/AoiListItem'
                  meta:
                    $ref: '#/components/schemas/GovernanceMetaAoiRegistry'

  /aoi/{aoi_id}:
    get:
      tags: [AOI]
      summary: Get a single AOI feature by id
      operationId: getAoiById
      parameters:
        - in: path
          name: aoi_id
          required: true
          schema: { type: string }
          description: AOI identifier (matches `properties.id` in the GeoJSON registry)
      responses:
        "200":
          description: AOI feature and governance metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  feature:
                    $ref: '#/components/schemas/AoiFeature'
                  meta:
                    $ref: '#/components/schemas/GovernanceMetaAoiSingle'
        "404": { description: AOI not found }

  /vessels/search:
    get:
      tags: [Vessels]
      summary: Search vessels by name, MMSI, or IMO
      operationId: searchVessels
      parameters:
        - in: query
          name: shipname
          description: Vessel name (full or partial)
          schema: { type: string, example: POLAR }
        - in: query
          name: mmsi
          description: Maritime Mobile Service Identity
          schema: { type: string, example: "257017000" }
        - in: query
          name: imo
          description: IMO number
          schema: { type: string, example: "9538907" }
      responses:
        "200":
          description: Upstream passthrough plus governance metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  nodes: { description: Upstream payload; structure varies }
                  meta:
                    $ref: '#/components/schemas/GovernanceMetaUpstream'
      security:
        - apiKeyHeader: []

  /vessels/aoi:
    get:
      tags: [Vessels]
      summary: List vessels within an AOI (by aoi_id or raw bbox)
      operationId: vesselsInAoi
      description: |
        Resolves `aoi_id` from the AOI registry or accepts raw `bbox`. Proxies to upstream `/exportvessels`.
        Supports optional `timespan` (minutes back), `shiptype` (code or name), and `msgtype`.
      parameters:
        - in: query
          name: aoi_id
          schema: { type: string }
          description: AOI id from `/aoi`. If present, overrides `bbox`.
        - in: query
          name: bbox
          schema: { type: string, example: "-170,65,-164,67" }
          description: minLon,minLat,maxLon,maxLat (WGS84)
        - in: query
          name: timespan
          schema: { type: integer, default: 60 }
          description: Minutes back (default 60)
        - in: query
          name: shiptype
          description: "Numeric code or name. Allowed: 2=fishing, 4=high_speed, 6=passenger, 7=cargo, 8=tanker"
          schema:
            oneOf:
              - type: integer
                enum: [2,4,6,7,8]
              - type: string
                enum: ["fishing","high_speed","high speed craft","passenger","cargo","tanker"]
        - in: query
          name: msgtype
          schema: { type: string, enum: [simple, extended, full], default: simple }
          description: Response detail level from upstream
      responses:
        "200":
          description: Vessels in AOI and governance metadata (includes AOI provenance when used)
          content:
            application/json:
              schema:
                type: object
                properties:
                  nodes: { description: Upstream payload; structure varies }
                  meta:
                    allOf:
                      - $ref: '#/components/schemas/GovernanceMetaUpstream'
                      - $ref: '#/components/schemas/GovernanceMetaAoiUse'
      security:
        - apiKeyHeader: []

  /vessels/nearby:
    get:
      tags: [Vessels]
      summary: Vessels within a radius (nm) of a point or AOI center
      operationId: vesselsNearby
      description: |
        If `aoi_id` (bbox type) is provided, the AOI centroid is used as center. Otherwise pass `lat` and `lon`.
        Prefilters with a bbox; when upstream returns JSON, results are refined by precise radius (haversine).
      parameters:
        - in: query
          name: aoi_id
          schema: { type: string }
          description: Optional AOI id; uses its bbox centroid as center
        - in: query
          name: lat
          schema: { type: number, minimum: -90, maximum: 90 }
        - in: query
          name: lon
          schema: { type: number, minimum: -180, maximum: 180 }
        - in: query
          name: radius_nm
          required: true
          schema: { type: number, minimum: 0.1, maximum: 1000, default: 50 }
          description: Radius in nautical miles
        - in: query
          name: timespan
          schema: { type: integer, default: 60 }
        - in: query
          name: shiptype
          description: "Numeric code or name. Allowed: 2=fishing, 4=high_speed, 6=passenger, 7=cargo, 8=tanker"
          schema:
            oneOf:
              - type: integer
                enum: [2,4,6,7,8]
              - type: string
                enum: ["fishing","high_speed","high speed craft","passenger","cargo","tanker"]
        - in: query
          name: msgtype
          schema: { type: string, enum: [simple, extended, full], default: simple }
      responses:
        "200":
          description: Nearby vessels (refined when JSON) with governance metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  nodes: { description: Filtered list or upstream text }
                  meta:
                    allOf:
                      - $ref: '#/components/schemas/GovernanceMetaUpstream'
                      - $ref: '#/components/schemas/GovernanceMetaAoiUse'
      security:
        - apiKeyHeader: []

  /vessel/info:
    get:
      tags: [Vessels]
      summary: Vessel information by one of ship_id | mmsi | imo
      operationId: vesselInfo
      description: Provide **exactly one** identifier.
      parameters:
        - in: query
          name: ship_id
          schema: { type: string, example: "1234567" }
          description: Provider vessel id (maps to upstream `shipid`)
        - in: query
          name: mmsi
          schema: { type: string, example: "257017000" }
        - in: query
          name: imo
          schema: { type: string, example: "9538907" }
      responses:
        "200":
          description: Vessel info (upstream passthrough) and governance metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  node: { description: Upstream payload; structure varies }
                  meta:
                    $ref: '#/components/schemas/GovernanceMetaUpstream'
      security:
        - apiKeyHeader: []

  /vessel/track:
    get:
      tags: [Tracks]
      summary: Vessel track by one of ship_id | mmsi | imo
      operationId: vesselTrack
      description: Provide **exactly one** identifier. Optionally bound by `fromdt`/`todt` or `timespan` (minutes back).
      parameters:
        - in: query
          name: ship_id
          schema: { type: string, example: "1234567" }
        - in: query
          name: mmsi
          schema: { type: string, example: "257017000" }
        - in: query
          name: imo
          schema: { type: string, example: "9538907" }
        - in: query
          name: fromdt
          schema: { type: string, example: "2025-09-01 00:00" }
        - in: query
          name: todt
          schema: { type: string, example: "2025-09-02 00:00" }
        - in: query
          name: timespan
          schema: { type: integer, example: 1440 }
      responses:
        "200":
          description: Track points (upstream passthrough) and governance metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  nodes: { description: Upstream payload; structure varies }
                  meta:
                    $ref: '#/components/schemas/GovernanceMetaUpstream'
      security:
        - apiKeyHeader: []

components:
  securitySchemes:
    apiKeyHeader:
      type: apiKey
      in: header
      name: X-Upstream-Api-Key

  schemas:
    # --- AOI ----
    AoiListItem:
      type: object
      properties:
        id: { type: string, example: chukchi_sea_ak }
        display_name: { type: string, example: Chukchi Sea (AK sector) }
        type: { type: string, enum: [bbox], example: bbox }
        bbox:
          type: array
          minItems: 4
          maxItems: 4
          items: { type: number }
          example: [-172.0, 68.0, -157.0, 72.5]

    AoiFeature:
      type: object
      properties:
        type: { type: string, example: Feature }
        properties:
          type: object
          properties:
            id: { type: string }
            display_name: { type: string }
            type: { type: string, enum: [bbox] }
            bbox:
              type: array
              minItems: 4
              maxItems: 4
              items: { type: number }
            defaults:
              type: object
              properties:
                timespan: { type: integer, example: 120 }
                msgtype:  { type: string, enum: [simple, extended, full], example: extended }
            notes: { type: string }
        geometry:
          type: object
          properties:
            type: { type: string, example: Polygon }
            coordinates:
              type: array
              description: Polygon ring per RFC 7946 (WGS84)
              items:
                type: array
                items:
                  type: array
                  items: { type: number }

    # --- Governance meta ----
    GovernanceMetaUpstream:
      type: object
      description: Governance metadata for upstream AIS calls
      properties:
        source: { type: string, example: ais_rest_upstream }
        endpoint: { type: string, example: /exportvessels }
        variablesHash: { type: string, example: sha256:â€¦ }
        fetchedAt: { type: string, format: date-time, example: "2025-10-11T14:12:03Z" }
        version: { type: string, example: "0.1.8" }

    
    GovernanceMetaAoiRegistry:
      type: object
      properties:
        endpoint: { type: string, example: /aoi }
        source:   { type: string }
        fetchedAt:{ type: string, format: date-time }
        registryHash: { type: string }
        version: { type: string }

    GovernanceMetaAoiSingle:
      type: object
      properties:
        endpoint: { type: string, example: /aoi/{aoi_id} }
        source: { type: string }
        fetchedAt: { type: string, format: date-time }
        registryHash: { type: string }
        aoiId: { type: string }
        aoiHash: { type: string }
        bbox:
          type: array
          items: { type: number }
          minItems: 4
          maxItems: 4
        version: { type: string }

    GovernanceMetaAoiUse:
      type: object
      properties:
        aoiEndpoint: { type: string, example: /aoi/{aoi_id} }
        aoiId: { type: string }
        aoiHash: { type: string }
        bbox:
          type: array
          items: { type: number }
          minItems: 4
          maxItems: 4