openapi: 3.0.3
info:
  title: NSIDC Sea Ice Agent API (Runtime Fetch)
  version: 0.5.0
  summary: LLM‑friendly OpenAPI for NSIDC sea‑ice concentration access, tiling, point sample, and region stats.
  description: |
    This contract upgrades the Sea Ice Agent for LLM orchestration and WatsonX Orchestrate.
    It adds reusable parameters/headers, RFC‑7807 error responses, security schemes
    (API key + Bearer), concrete examples, idempotency and rate‑limit headers, and
    per‑operation `x‑orchestrate` metadata (intents, slot mapping, output shaping, and follow‑ons).
externalDocs:
  description: NSIDC sea ice datasets overview
  url: https://nsidc.org/
servers:
  - url: https://{host}/{basePath}
    description: Default
    variables:
      host:
        default: localhost:8090
        description: Hostname and port
      basePath:
        default: seaice
        description: Base path for all endpoints
  - url: http://localhost:8090/seaice
    description: Local development
security:
  - ApiKeyAuth: []
  - BearerAuth: []
tags:
  - name: Health
  - name: Visualization
  - name: Data Management
  - name: Query

paths:
  /health:
    get:
      tags: [Health]
      summary: Liveness and configuration
      operationId: getSeaIceHealth
      responses:
        '200':
          description: Service health
          headers:
            X-Request-ID: { $ref: '#/components/headers/XRequestID' }
            X-Response-Time-MS: { $ref: '#/components/headers/XResponseTimeMS' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: ok }
                  variable: { type: string, example: sea_ice_concentration }
                  crs: { type: string, example: EPSG:4326 }
                  data_dir: { type: string, example: /data/seaice }
                  url_pattern: { type: string }
                  sensors_tried:
                    type: array
                    items: { type: string }
                  governance: { $ref: '#/components/schemas/GovernanceMeta' }
              examples:
                ok:
                  value:
                    status: ok
                    variable: sea_ice_concentration
                    crs: EPSG:4326
                    data_dir: /data/seaice
                    url_pattern: "https://.../{yyyy}/{mm}/file.nc"
                    sensors_tried: [AMSR2, SSMIS]
                    governance:
                      endpoint: /seaice/health
      x-orchestrate:
        actionName: Check sea‑ice service health
        intentExamples:
          - "Is the sea‑ice service up?"
          - "Show sea‑ice agent status"

  /wms:
    get:
      tags: [Visualization]
      summary: Get a WMS URL template and example parameters
      operationId: getSeaIceWMSTemplate
      parameters:
        - $ref: '#/components/parameters/Layer'
        - $ref: '#/components/parameters/Time'
        - $ref: '#/components/parameters/BBox'
        - $ref: '#/components/parameters/SRS'
        - $ref: '#/components/parameters/Width'
        - $ref: '#/components/parameters/Height'
        - $ref: '#/components/parameters/Format'
        - $ref: '#/components/parameters/IdempotencyKey'
      responses:
        '200':
          description: WMS template
          headers:
            X-Request-ID: { $ref: '#/components/headers/XRequestID' }
            X-Response-Time-MS: { $ref: '#/components/headers/XResponseTimeMS' }
            X-RateLimit-Limit: { $ref: '#/components/headers/XRateLimitLimit' }
            X-RateLimit-Remaining: { $ref: '#/components/headers/XRateLimitRemaining' }
            X-RateLimit-Reset: { $ref: '#/components/headers/XRateLimitReset' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  wms_url_template: { type: string }
                  params_example:
                    type: object
                    additionalProperties: true
                  note: { type: string }
                  governance: { $ref: '#/components/schemas/GovernanceMeta' }
              examples:
                example:
                  value:
                    wms_url_template: "https://tiles.example.org/wms?SERVICE=WMS&REQUEST=GetMap&LAYERS={layer}&TIME={time}&BBOX={bbox}&SRS={srs}&WIDTH={width}&HEIGHT={height}&FORMAT={format}"
                    params_example:
                      layer: nsidc:seaice_concentration
                      time: 2025-10-01
                      bbox: 60,-180,90,180
                      srs: EPSG:4326
                      width: 1024
                      height: 512
                      format: image/png
                    note: Use the template above in a GIS client to render the layer.
                    governance:
                      endpoint: /seaice/wms
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalError' }
      x-orchestrate:
        actionName: Get WMS template for sea‑ice layer
        description: Provide a ready‑to‑use WMS template and example parameters for visualization.
        slots:
          - name: layer
            required: false
            fromUserUtterance: true
          - name: time
            required: false
            fromUserUtterance: true
          - name: bbox
            required: false
            fromUserUtterance: true
        outputShape:
          path: $
          projection:
            template: $.wms_url_template
            example: $.params_example

  /download:
    get:
      tags: [Data Management]
      summary: Ensure dataset for a date is cached locally (download if needed)
      operationId: getSeaIceDataset
      parameters:
        - $ref: '#/components/parameters/TimeRequired'
        - $ref: '#/components/parameters/Force'
        - $ref: '#/components/parameters/IdempotencyKey'
      responses:
        '200':
          description: Download (or cached) result
          headers:
            X-Request-ID: { $ref: '#/components/headers/XRequestID' }
            X-Response-Time-MS: { $ref: '#/components/headers/XResponseTimeMS' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, enum: [cached, downloaded] }
                  time: { type: string }
                  sensor: { type: string }
                  url: { type: string }
                  file: { type: string }
                  size_bytes: { type: integer }
                  cache_cleared: { type: boolean }
                  governance: { $ref: '#/components/schemas/GovernanceMeta' }
              examples:
                cached:
                  value:
                    status: cached
                    time: 2025-09-01
                    sensor: AMSR2
                    url: "https://nsidc.org/data/.../N20250901.nc"
                    file: "/data/seaice/N20250901.nc"
                    size_bytes: 23123456
                    cache_cleared: false
                    governance:
                      endpoint: /seaice/download
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalError' }
      x-orchestrate:
        actionName: Prepare sea‑ice dataset for date
        intentExamples:
          - "Preload sea‑ice file for 2025‑09‑01"
          - "Download the latest sea‑ice dataset"
        slots:
          - name: time
            required: true
            fromUserUtterance: true
        outputShape:
          path: $
          projection:
            filepath: $.file
            bytes: $.size_bytes
            sensor: $.sensor

  /point:
    get:
      tags: [Query]
      summary: Nearest‑neighbor sample at a lat/lon (WGS84) for a date
      operationId: getSeaIcePoint
      parameters:
        - $ref: '#/components/parameters/Lat'
        - $ref: '#/components/parameters/Lon'
        - $ref: '#/components/parameters/Time'
        - $ref: '#/components/parameters/IdempotencyKey'
      responses:
        '200':
          description: Point sample
          headers:
            X-Request-ID: { $ref: '#/components/headers/XRequestID' }
            X-Response-Time-MS: { $ref: '#/components/headers/XResponseTimeMS' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  lat: { type: number }
                  lon: { type: number }
                  time: { type: string }
                  value_raw: { type: number }
                  value_fraction: { type: number, description: 0–1 fraction }
                  file: { type: string }
                  variable: { type: string }
                  projection: { type: string }
                  sensor: { type: string }
                  governance: { $ref: '#/components/schemas/GovernanceMeta' }
              examples:
                sample:
                  value:
                    lat: 71.29
                    lon: -156.79
                    time: 2025-09-01
                    value_raw: 87
                    value_fraction: 0.87
                    file: "/data/seaice/N20250901.nc"
                    variable: sea_ice_concentration
                    projection: EPSG:4326
                    sensor: AMSR2
                    governance:
                      endpoint: /seaice/point
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalError' }
      x-orchestrate:
        actionName: Sample sea‑ice at a point
        description: Return sea‑ice concentration for a point and date.
        intentExamples:
          - "Sea‑ice at 71.29, −156.79 on 2025‑09‑01"
          - "What is the ice fraction near Utqiagvik today?"
        slots:
          - name: latitude
            required: true
            fromUserUtterance: true
          - name: longitude
            required: true
            fromUserUtterance: true
          - name: time
            required: false
            fromUserUtterance: true
        outputShape:
          path: $
          projection:
            fraction: $.value_fraction
            raw: $.value_raw
            sensor: $.sensor

  /stats:
    post:
      tags: [Query]
      summary: Simple stats over a lat/lon bbox for a date
      operationId: getSeaIceStats
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [bbox]
              properties:
                bbox:
                  type: array
                  minItems: 4
                  maxItems: 4
                  items: { type: number }
                  example: [60, -180, 90, 180]
                time:
                  type: string
                  example: 2025-09-01
      responses:
        '200':
          description: Stats
          headers:
            X-Request-ID: { $ref: '#/components/headers/XRequestID' }
            X-Response-Time-MS: { $ref: '#/components/headers/XResponseTimeMS' }
          content:
            application/json:
              schema:
                type: object
                properties:
                  bbox:
                    type: array
                    items: { type: number }
                  time: { type: string }
                  count: { type: integer }
                  mean: { type: number }
                  median: { type: number }
                  min: { type: number }
                  max: { type: number }
                  units: { type: string, example: fraction }
                  file: { type: string }
                  variable: { type: string }
                  projection: { type: string }
                  sensor: { type: string }
                  governance: { $ref: '#/components/schemas/GovernanceMeta' }
              examples:
                example:
                  value:
                    bbox: [60, -180, 90, 180]
                    time: 2025-09-01
                    count: 102400
                    mean: 0.64
                    median: 0.68
                    min: 0.00
                    max: 0.98
                    units: fraction
                    file: "/data/seaice/N20250901.nc"
                    variable: sea_ice_concentration
                    projection: EPSG:4326
                    sensor: AMSR2
                    governance:
                      endpoint: /seaice/stats
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/TooManyRequests' }
        '500': { $ref: '#/components/responses/InternalError' }
      x-orchestrate:
        actionName: Compute sea‑ice stats for a region
        description: Compute regional statistics (mean, min, max, median) of sea‑ice fraction for a bounding box and date.
        intentExamples:
          - "Average ice concentration north of 60° on Sept 1, 2025"
          - "Give me min/mean/max for 60–90°N"
        slots:
          - name: bbox
            required: true
            fromUserUtterance: true
          - name: time
            required: false
            fromUserUtterance: true
        outputShape:
          path: $
          projection:
            mean: $.mean
            min: $.min
            max: $.max

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: Optional API key if deployed behind an API gateway.
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  headers:
    XRequestID:
      description: Correlation ID assigned by middleware (or supplied by caller).
      schema: { type: string }
    XResponseTimeMS:
      description: Elapsed processing time in milliseconds.
      schema: { type: string }
    XRateLimitLimit:
      description: Number of allowed requests in the current window.
      schema: { type: integer }
    XRateLimitRemaining:
      description: Number of remaining requests in the current window.
      schema: { type: integer }
    XRateLimitReset:
      description: UTC epoch seconds when the window resets.
      schema: { type: integer }
  parameters:
    IdempotencyKey:
      name: Idempotency-Key
      in: header
      required: false
      description: Provide a unique key to make GETs safe to replay across orchestrations.
      schema: { type: string, minLength: 8 }
    Layer:
      name: layer
      in: query
      required: false
      schema: { type: string }
      example: nsidc:seaice_concentration
    Time:
      name: time
      in: query
      required: false
      schema:
        type: string
        pattern: '^\\d{4}-\\d{2}-\\d{2}$'
      example: '2025-09-01'
    TimeRequired:
      name: time
      in: query
      required: true
      schema:
        type: string
        pattern: '^\\d{4}-\\d{2}-\\d{2}$'
      example: '2025-09-01'
    BBox:
      name: bbox
      in: query
      required: false
      schema: { type: string }
      example: '60,-180,90,180'
    SRS:
      name: srs
      in: query
      required: false
      schema: { type: string, default: 'EPSG:4326' }
    Width:
      name: width
      in: query
      required: false
      schema: { type: integer, default: 1024 }
    Height:
      name: height
      in: query
      required: false
      schema: { type: integer, default: 512 }
    Format:
      name: format
      in: query
      required: false
      schema: { type: string, default: image/png }
    Force:
      name: force
      in: query
      required: false
      schema: { type: boolean, default: false }
    Lat:
      name: lat
      in: query
      required: true
      schema: { type: number, minimum: -90, maximum: 90 }
    Lon:
      name: lon
      in: query
      required: true
      schema: { type: number, minimum: -180, maximum: 180 }
  responses:
    BadRequest:
      description: Bad request
      content:
        application/problem+json:
          schema: { $ref: '#/components/schemas/Error' }
    Unauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema: { $ref: '#/components/schemas/Error' }
    TooManyRequests:
      description: Too many requests
      headers:
        Retry-After:
          description: Seconds to wait before retrying.
          schema: { type: integer }
      content:
        application/problem+json:
          schema: { $ref: '#/components/schemas/Error' }
    InternalError:
      description: Unexpected error
      content:
        application/problem+json:
          schema: { $ref: '#/components/schemas/Error' }
  schemas:
    GovernanceMeta:
      type: object
      additionalProperties: true
      properties:
        app: { type: string }
        app_version: { type: string }
        endpoint: { type: string }
        timestamp: { type: string, format: date-time }
        request_id: { type: string }
        served_by: { type: string }
        inputs:
          type: object
          additionalProperties: true
        data_lineage:
          type: object
          additionalProperties: true
        quality:
          type: object
          additionalProperties: true
        policies_applied:
          type: array
          items: { type: string }
        risk_assessments:
          type: array
          items:
            type: object
            additionalProperties: true
        tags:
          type: object
          additionalProperties: true
        license:
          type: object
          properties:
            name: { type: string }
            url: { type: string }
    Error:
      type: object
      description: RFC7807 problem details
      properties:
        type: { type: string, format: uri, example: about:blank }
        title: { type: string }
        status: { type: integer }
        detail: { type: string }
        instance: { type: string }
        request_id: { type: string }
        governance: { $ref: '#/components/schemas/GovernanceMeta' }
      required: [title, status]
